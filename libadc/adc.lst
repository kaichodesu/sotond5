GAS LISTING /tmp/ccfPHSKZ.s 			page 1


   1               		.file	"adc.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/home/kaicho/Southampton/sotond5/sotond5/libadc/",100,0,2,.Ltext0
   8               		.stabs	"adc.c",100,0,2,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"init_timers:F(0,1)=(0,1)",36,0,14,init_timers
  13               		.stabs	"uint8_t:t(0,2)=(0,3)=@s8;r(0,3);0;255;",128,0,126,0
  14               		.stabs	"void:t(0,1)",128,0,0,0
  15               		.stabs	"unsigned char:t(0,3)",128,0,0,0
  16               	.global	init_timers
  17               		.type	init_timers, @function
  18               	init_timers:
   1:adc.c         **** #include <stdio.h>
   2:adc.c         **** #include <avr/io.h>
   3:adc.c         **** #include <util/delay.h>
   4:adc.c         **** #include <avr/interrupt.h>
   5:adc.c         **** #include <stdbool.h>
   6:adc.c         **** #include "../libio/io.h"
   7:adc.c         **** 
   8:adc.c         **** volatile uint16_t adc_read;
   9:adc.c         **** volatile bool calibrating, adc_rdy, sync, adc_mux_rdy;
  10:adc.c         **** uint8_t TIMER0_TOP = 233;
  11:adc.c         **** uint8_t phase_delay = 176;
  12:adc.c         **** //  TOP value used to fine tune the phase delay to capture the mains AC phase.
  13:adc.c         **** 
  14:adc.c         **** void init_timers(void)
  15:adc.c         **** {
  19               		.stabn	68,0,15,.LM0-.LFBB1
  20               	.LM0:
  21               	.LFBB1:
  22               	/* prologue: function */
  23               	/* frame size = 0 */
  24               	/* stack size = 0 */
  25               	.L__stack_usage = 0
  16:adc.c         **** 	TCCR0A = 0x02; // set timer0 to CTC mode with 1024 prescaler
  26               		.stabn	68,0,16,.LM1-.LFBB1
  27               	.LM1:
  28 0000 82E0      		ldi r24,lo8(2)
  29 0002 84BD      		out 0x24,r24
  17:adc.c         **** 	TCCR0B = 0x05;
  30               		.stabn	68,0,17,.LM2-.LFBB1
  31               	.LM2:
  32 0004 85E0      		ldi r24,lo8(5)
  33 0006 85BD      		out 0x25,r24
  18:adc.c         **** 	TCNT0 = 0;
  34               		.stabn	68,0,18,.LM3-.LFBB1
  35               	.LM3:
  36 0008 16BC      		out 0x26,__zero_reg__
  19:adc.c         ****     TIMSK0 = 0;
  37               		.stabn	68,0,19,.LM4-.LFBB1
  38               	.LM4:
GAS LISTING /tmp/ccfPHSKZ.s 			page 2


  39 000a 1092 6E00 		sts 110,__zero_reg__
  20:adc.c         ****     sync = false;
  40               		.stabn	68,0,20,.LM5-.LFBB1
  41               	.LM5:
  42 000e 1092 0000 		sts sync,__zero_reg__
  43               	/* epilogue start */
  21:adc.c         **** 	//set prescaler to 1024, count up to 116 (OCR0A),
  22:adc.c         **** }
  44               		.stabn	68,0,22,.LM6-.LFBB1
  45               	.LM6:
  46 0012 0895      		ret
  47               		.size	init_timers, .-init_timers
  48               	.Lscope1:
  49               		.stabs	"",36,0,0,.Lscope1-.LFBB1
  50               		.stabs	"adts_disable:F(0,1)",36,0,24,adts_disable
  51               	.global	adts_disable
  52               		.type	adts_disable, @function
  53               	adts_disable:
  23:adc.c         **** 
  24:adc.c         **** void adts_disable(void){
  54               		.stabn	68,0,24,.LM7-.LFBB2
  55               	.LM7:
  56               	.LFBB2:
  57               	/* prologue: function */
  58               	/* frame size = 0 */
  59               	/* stack size = 0 */
  60               	.L__stack_usage = 0
  25:adc.c         ****     ADCSRB = 0;
  61               		.stabn	68,0,25,.LM8-.LFBB2
  62               	.LM8:
  63 0014 1092 7B00 		sts 123,__zero_reg__
  64               	/* epilogue start */
  26:adc.c         **** }
  65               		.stabn	68,0,26,.LM9-.LFBB2
  66               	.LM9:
  67 0018 0895      		ret
  68               		.size	adts_disable, .-adts_disable
  69               	.Lscope2:
  70               		.stabs	"",36,0,0,.Lscope2-.LFBB2
  71               		.stabs	"adts_enable:F(0,1)",36,0,28,adts_enable
  72               	.global	adts_enable
  73               		.type	adts_enable, @function
  74               	adts_enable:
  27:adc.c         **** 
  28:adc.c         **** void adts_enable(void){
  75               		.stabn	68,0,28,.LM10-.LFBB3
  76               	.LM10:
  77               	.LFBB3:
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  29:adc.c         ****     ADCSRB |=_BV(ADTS1);
  82               		.stabn	68,0,29,.LM11-.LFBB3
  83               	.LM11:
  84 001a EBE7      		ldi r30,lo8(123)
  85 001c F0E0      		ldi r31,0
GAS LISTING /tmp/ccfPHSKZ.s 			page 3


  86 001e 8081      		ld r24,Z
  87 0020 8260      		ori r24,lo8(2)
  88 0022 8083      		st Z,r24
  30:adc.c         **** 	ADCSRB |=_BV(ADTS0);
  89               		.stabn	68,0,30,.LM12-.LFBB3
  90               	.LM12:
  91 0024 8081      		ld r24,Z
  92 0026 8160      		ori r24,lo8(1)
  93 0028 8083      		st Z,r24
  94               	/* epilogue start */
  31:adc.c         **** }
  95               		.stabn	68,0,31,.LM13-.LFBB3
  96               	.LM13:
  97 002a 0895      		ret
  98               		.size	adts_enable, .-adts_enable
  99               	.Lscope3:
 100               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 101               		.stabs	"__vector_24:F(0,1)",36,0,33,__vector_24
 102               		.stabs	"uint16_t:t(0,4)=(0,5)=r(0,5);0;0177777;",128,0,128,0
 103               		.stabs	"unsigned int:t(0,5)",128,0,0,0
 104               	.global	__vector_24
 105               		.type	__vector_24, @function
 106               	__vector_24:
  32:adc.c         **** 
  33:adc.c         **** ISR(ADC_vect){
 107               		.stabn	68,0,33,.LM14-.LFBB4
 108               	.LM14:
 109               	.LFBB4:
 110 002c 8F93      		__gcc_isr 1
 111 002e 9F93      		push r25
 112               	/* prologue: Signal */
 113               	/* frame size = 0 */
 114               	/* stack size = 1...5 */
 115               	.L__stack_usage = 1 + __gcc_isr.n_pushed
  34:adc.c         ****     adc_read = ADC;
 116               		.stabn	68,0,34,.LM15-.LFBB4
 117               	.LM15:
 118 0030 8091 7800 		lds r24,120
 119 0034 9091 7900 		lds r25,120+1
 120               		.stabn	68,0,34,.LM16-.LFBB4
 121               	.LM16:
 122 0038 9093 0000 		sts adc_read+1,r25
 123 003c 8093 0000 		sts adc_read,r24
  35:adc.c         ****     adc_rdy = true;
 124               		.stabn	68,0,35,.LM17-.LFBB4
 125               	.LM17:
 126 0040 81E0      		ldi r24,lo8(1)
 127 0042 8093 0000 		sts adc_rdy,r24
 128               	/* epilogue start */
  36:adc.c         ****     // a flag for the main loop
  37:adc.c         **** }
 129               		.stabn	68,0,37,.LM18-.LFBB4
 130               	.LM18:
 131 0046 9F91      		pop r25
 132 0048 8F91      		__gcc_isr 2
 133 004a 1895      		reti
 134               		__gcc_isr 0,r24
GAS LISTING /tmp/ccfPHSKZ.s 			page 4


 135               		.size	__vector_24, .-__vector_24
 136               	.Lscope4:
 137               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 138               		.stabs	"__vector_16:F(0,1)",36,0,39,__vector_16
 139               	.global	__vector_16
 140               		.type	__vector_16, @function
 141               	__vector_16:
  38:adc.c         **** 
  39:adc.c         **** ISR(TIMER0_COMPA_vect){
 142               		.stabn	68,0,39,.LM19-.LFBB5
 143               	.LM19:
 144               	.LFBB5:
 145 004c 8F93      		__gcc_isr 1
 146               	/* prologue: Signal */
 147               	/* frame size = 0 */
 148               	/* stack size = 0...4 */
 149               	.L__stack_usage = 0 + __gcc_isr.n_pushed
  40:adc.c         ****     sync = true;
 150               		.stabn	68,0,40,.LM20-.LFBB5
 151               	.LM20:
 152 004e 81E0      		ldi r24,lo8(1)
 153 0050 8093 0000 		sts sync,r24
 154               	/* epilogue start */
  41:adc.c         **** }
 155               		.stabn	68,0,41,.LM21-.LFBB5
 156               	.LM21:
 157 0054 8F91      		__gcc_isr 2
 158 0056 1895      		reti
 159               		__gcc_isr 0,r24
 160               		.size	__vector_16, .-__vector_16
 161               	.Lscope5:
 162               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 163               		.stabs	"__vector_9:F(0,1)",36,0,43,__vector_9
 164               	.global	__vector_9
 165               		.type	__vector_9, @function
 166               	__vector_9:
  42:adc.c         **** 
  43:adc.c         **** ISR(TIMER2_COMPA_vect){
 167               		.stabn	68,0,43,.LM22-.LFBB6
 168               	.LM22:
 169               	.LFBB6:
 170 0058 1F92 1FB6 		__gcc_isr 1
 170      1F92 1124 
 170      8F93 
 171               	/* prologue: Signal */
 172               	/* frame size = 0 */
 173               	/* stack size = 0...4 */
 174               	.L__stack_usage = 0 + __gcc_isr.n_pushed
  44:adc.c         ****     TCCR2B = 0x00;
 175               		.stabn	68,0,44,.LM23-.LFBB6
 176               	.LM23:
 177 0062 1092 B100 		sts 177,__zero_reg__
  45:adc.c         ****     //  Stop the timer after reset.
  46:adc.c         ****     adc_mux_rdy = true;
 178               		.stabn	68,0,46,.LM24-.LFBB6
 179               	.LM24:
 180 0066 81E0      		ldi r24,lo8(1)
GAS LISTING /tmp/ccfPHSKZ.s 			page 5


 181 0068 8093 0000 		sts adc_mux_rdy,r24
 182               	/* epilogue start */
  47:adc.c         **** }
 183               		.stabn	68,0,47,.LM25-.LFBB6
 184               	.LM25:
 185 006c 8F91 1F90 		__gcc_isr 2
 185      1FBE 1F90 
 186 0074 1895      		reti
 187               		__gcc_isr 0,r24
 188               		.size	__vector_9, .-__vector_9
 189               	.Lscope6:
 190               		.stabs	"",36,0,0,.Lscope6-.LFBB6
 191               		.stabs	"calibrate_timer0:F(0,1)",36,0,49,calibrate_timer0
 192               	.global	calibrate_timer0
 193               		.type	calibrate_timer0, @function
 194               	calibrate_timer0:
  48:adc.c         **** 
  49:adc.c         **** void calibrate_timer0(void)
  50:adc.c         **** {
 195               		.stabn	68,0,50,.LM26-.LFBB7
 196               	.LM26:
 197               	.LFBB7:
 198               	/* prologue: function */
 199               	/* frame size = 0 */
 200               	/* stack size = 0 */
 201               	.L__stack_usage = 0
  51:adc.c         ****     int i;
  52:adc.c         ****     calibrating = true;
 202               		.stabn	68,0,52,.LM27-.LFBB7
 203               	.LM27:
 204 0076 81E0      		ldi r24,lo8(1)
 205 0078 8093 0000 		sts calibrating,r24
  53:adc.c         ****     ADCSRA |= _BV(ADIE);
 206               		.stabn	68,0,53,.LM28-.LFBB7
 207               	.LM28:
 208 007c 8091 7A00 		lds r24,122
 209 0080 8860      		ori r24,lo8(8)
 210 0082 8093 7A00 		sts 122,r24
 211               	.LBB4:
 212               	.LBB5:
  25:adc.c         **** }
 213               		.stabn	68,0,25,.LM29-.LFBB7
 214               	.LM29:
 215 0086 1092 7B00 		sts 123,__zero_reg__
 216               	.LBE5:
 217               	.LBE4:
  54:adc.c         ****     adts_disable();
  55:adc.c         ****     //  Turn off OCR0A triggering if it is enabled.
  56:adc.c         **** 	ADMUX = 0x05;
 218               		.stabn	68,0,56,.LM30-.LFBB7
 219               	.LM30:
 220 008a 85E0      		ldi r24,lo8(5)
 221 008c 8093 7C00 		sts 124,r24
  57:adc.c         ****     //  Select PA5 as the ADC source.
  58:adc.c         ****     ADCSRA |=_BV(ADATE);
 222               		.stabn	68,0,58,.LM31-.LFBB7
 223               	.LM31:
GAS LISTING /tmp/ccfPHSKZ.s 			page 6


 224 0090 8091 7A00 		lds r24,122
 225 0094 8062      		ori r24,lo8(32)
 226 0096 8093 7A00 		sts 122,r24
  59:adc.c         ****     ADCSRA |= _BV(ADSC);
 227               		.stabn	68,0,59,.LM32-.LFBB7
 228               	.LM32:
 229 009a 8091 7A00 		lds r24,122
 230 009e 8064      		ori r24,lo8(64)
 231 00a0 8093 7A00 		sts 122,r24
 232 00a4 84E1      		ldi r24,lo8(20)
 233 00a6 90E0      		ldi r25,0
 234               	.L8:
  60:adc.c         ****     //  start conversions in free running mode
  61:adc.c         ****     for(i = 0; i < 20; i++)
  62:adc.c         ****     while(adc_read <= 20){}
 235               		.stabn	68,0,62,.LM33-.LFBB7
 236               	.LM33:
 237 00a8 2091 0000 		lds r18,adc_read
 238 00ac 3091 0000 		lds r19,adc_read+1
 239 00b0 2531      		cpi r18,21
 240 00b2 3105      		cpc r19,__zero_reg__
 241 00b4 00F0      		brlo .L8
  61:adc.c         ****     while(adc_read <= 20){}
 242               		.stabn	68,0,61,.LM34-.LFBB7
 243               	.LM34:
 244 00b6 0197      		sbiw r24,1
 245 00b8 01F4      		brne .L8
 246 00ba 84E1      		ldi r24,lo8(20)
 247 00bc 90E0      		ldi r25,0
 248               	.L10:
  63:adc.c         ****         //  Waiting for the ADC to rise into the rectified waveform.
  64:adc.c         ****     for(i = 0; i < 20; i++)
  65:adc.c         **** 	while(adc_read > 0){}
 249               		.stabn	68,0,65,.LM35-.LFBB7
 250               	.LM35:
 251 00be 2091 0000 		lds r18,adc_read
 252 00c2 3091 0000 		lds r19,adc_read+1
 253 00c6 232B      		or r18,r19
 254 00c8 01F4      		brne .L10
  64:adc.c         **** 	while(adc_read > 0){}
 255               		.stabn	68,0,64,.LM36-.LFBB7
 256               	.LM36:
 257 00ca 0197      		sbiw r24,1
 258 00cc 01F4      		brne .L10
  66:adc.c         ****     //  The instant the ADC reaches 0 again, we are in phase, and can reset the timer.
  67:adc.c         ****     ADCSRA &= ~_BV(ADIE);
 259               		.stabn	68,0,67,.LM37-.LFBB7
 260               	.LM37:
 261 00ce 8091 7A00 		lds r24,122
 262 00d2 877F      		andi r24,lo8(-9)
 263 00d4 8093 7A00 		sts 122,r24
  68:adc.c         ****     //  Turn off ADC interrupts
  69:adc.c         ****     init_timers();
 264               		.stabn	68,0,69,.LM38-.LFBB7
 265               	.LM38:
 266 00d8 0E94 0000 		call init_timers
  70:adc.c         ****     //  Start Timer
GAS LISTING /tmp/ccfPHSKZ.s 			page 7


  71:adc.c         ****     OCR0A = phase_delay;
 267               		.stabn	68,0,71,.LM39-.LFBB7
 268               	.LM39:
 269 00dc 8091 0000 		lds r24,phase_delay
 270 00e0 87BD      		out 0x27,r24
  72:adc.c         ****     TIMSK0 |= _BV(OCIE0A);
 271               		.stabn	68,0,72,.LM40-.LFBB7
 272               	.LM40:
 273 00e2 8091 6E00 		lds r24,110
 274 00e6 8260      		ori r24,lo8(2)
 275 00e8 8093 6E00 		sts 110,r24
  73:adc.c         ****     //ADCSRA &= ~_BV(ADIE);
  74:adc.c         ****     //  Reset timer 0 and turn off ADC interrupts
  75:adc.c         ****     sync = false;
 276               		.stabn	68,0,75,.LM41-.LFBB7
 277               	.LM41:
 278 00ec 1092 0000 		sts sync,__zero_reg__
 279               	.L12:
  76:adc.c         **** 	while(sync == false); //here we have reached a peak
 280               		.stabn	68,0,76,.LM42-.LFBB7
 281               	.LM42:
 282 00f0 8091 0000 		lds r24,sync
 283 00f4 8823      		tst r24
 284 00f6 01F0      		breq .L12
  77:adc.c         **** 	TCNT0 = 0; //reset timer count
 285               		.stabn	68,0,77,.LM43-.LFBB7
 286               	.LM43:
 287 00f8 16BC      		out 0x26,__zero_reg__
  78:adc.c         **** 	OCR0A = TIMER0_TOP;//output compare 1 cycle after the peak
 288               		.stabn	68,0,78,.LM44-.LFBB7
 289               	.LM44:
 290 00fa 8091 0000 		lds r24,TIMER0_TOP
 291 00fe 87BD      		out 0x27,r24
  79:adc.c         **** 
  80:adc.c         ****     ADMUX = 0x06;
 292               		.stabn	68,0,80,.LM45-.LFBB7
 293               	.LM45:
 294 0100 86E0      		ldi r24,lo8(6)
 295 0102 8093 7C00 		sts 124,r24
  81:adc.c         ****     adts_enable();
 296               		.stabn	68,0,81,.LM46-.LFBB7
 297               	.LM46:
 298 0106 0E94 0000 		call adts_enable
  82:adc.c         ****     ADCSRA |= _BV(ADIE);
 299               		.stabn	68,0,82,.LM47-.LFBB7
 300               	.LM47:
 301 010a 8091 7A00 		lds r24,122
 302 010e 8860      		ori r24,lo8(8)
 303 0110 8093 7A00 		sts 122,r24
  83:adc.c         **** 	calibrating = false;
 304               		.stabn	68,0,83,.LM48-.LFBB7
 305               	.LM48:
 306 0114 1092 0000 		sts calibrating,__zero_reg__
  84:adc.c         ****     adc_rdy = false;
 307               		.stabn	68,0,84,.LM49-.LFBB7
 308               	.LM49:
 309 0118 1092 0000 		sts adc_rdy,__zero_reg__
GAS LISTING /tmp/ccfPHSKZ.s 			page 8


 310               	/* epilogue start */
  85:adc.c         ****     //  Restart ADC on Timer0 interrupts
  86:adc.c         **** }
 311               		.stabn	68,0,86,.LM50-.LFBB7
 312               	.LM50:
 313 011c 0895      		ret
 314               		.size	calibrate_timer0, .-calibrate_timer0
 315               	.Lscope7:
 316               		.stabs	"",36,0,0,.Lscope7-.LFBB7
 317               		.stabs	"init_adc:F(0,1)",36,0,88,init_adc
 318               	.global	init_adc
 319               		.type	init_adc, @function
 320               	init_adc:
  87:adc.c         **** 
  88:adc.c         **** void init_adc(void){
 321               		.stabn	68,0,88,.LM51-.LFBB8
 322               	.LM51:
 323               	.LFBB8:
 324               	/* prologue: function */
 325               	/* frame size = 0 */
 326               	/* stack size = 0 */
 327               	.L__stack_usage = 0
  89:adc.c         ****     sei();
 328               		.stabn	68,0,89,.LM52-.LFBB8
 329               	.LM52:
 330               	/* #APP */
 331               	 ;  89 "adc.c" 1
 332 011e 7894      		sei
 333               	 ;  0 "" 2
  90:adc.c         ****     ADCSRA |= _BV(ADPS2) |_BV(ADPS1)/*|_BV(ADPS0)*/;
 334               		.stabn	68,0,90,.LM53-.LFBB8
 335               	.LM53:
 336               	/* #NOAPP */
 337 0120 EAE7      		ldi r30,lo8(122)
 338 0122 F0E0      		ldi r31,0
 339 0124 8081      		ld r24,Z
 340 0126 8660      		ori r24,lo8(6)
 341 0128 8083      		st Z,r24
  91:adc.c         ****     //  ADC ~200kHz
  92:adc.c         ****     ADCSRA |= _BV(ADEN);
 342               		.stabn	68,0,92,.LM54-.LFBB8
 343               	.LM54:
 344 012a 8081      		ld r24,Z
 345 012c 8068      		ori r24,lo8(-128)
 346 012e 8083      		st Z,r24
  93:adc.c         ****     //  Enable ADC
  94:adc.c         ****     calibrate_timer0();
 347               		.stabn	68,0,94,.LM55-.LFBB8
 348               	.LM55:
 349 0130 0C94 0000 		jmp calibrate_timer0
 350               		.size	init_adc, .-init_adc
 351               	.Lscope8:
 352               		.stabs	"",36,0,0,.Lscope8-.LFBB8
 353               	.global	phase_delay
 354               		.data
 355               		.type	phase_delay, @object
 356               		.size	phase_delay, 1
GAS LISTING /tmp/ccfPHSKZ.s 			page 9


 357               	phase_delay:
 358 0000 B0        		.byte	-80
 359               		.stabs	"phase_delay:G(0,2)",32,0,11,0
 360               	.global	TIMER0_TOP
 361               		.type	TIMER0_TOP, @object
 362               		.size	TIMER0_TOP, 1
 363               	TIMER0_TOP:
 364 0001 E9        		.byte	-23
 365               		.stabs	"TIMER0_TOP:G(0,2)",32,0,10,0
 366               	.global	adc_mux_rdy
 367               		.section .bss
 368               		.type	adc_mux_rdy, @object
 369               		.size	adc_mux_rdy, 1
 370               	adc_mux_rdy:
 371 0000 00        		.zero	1
 372               		.stabs	"adc_mux_rdy:G(0,6)=B(0,7)=@s8;-16;",32,0,9,0
 373               		.stabs	"_Bool:t(0,7)",128,0,0,0
 374               	.global	sync
 375               		.type	sync, @object
 376               		.size	sync, 1
 377               	sync:
 378 0001 00        		.zero	1
 379               		.stabs	"sync:G(0,6)",32,0,9,0
 380               	.global	adc_rdy
 381               		.type	adc_rdy, @object
 382               		.size	adc_rdy, 1
 383               	adc_rdy:
 384 0002 00        		.zero	1
 385               		.stabs	"adc_rdy:G(0,6)",32,0,9,0
 386               	.global	calibrating
 387               		.type	calibrating, @object
 388               		.size	calibrating, 1
 389               	calibrating:
 390 0003 00        		.zero	1
 391               		.stabs	"calibrating:G(0,6)",32,0,9,0
 392               	.global	adc_read
 393               		.type	adc_read, @object
 394               		.size	adc_read, 2
 395               	adc_read:
 396 0004 0000      		.zero	2
 397               		.stabs	"adc_read:G(0,8)=B(0,4)",32,0,8,0
 398               		.text
 399               		.stabs	"",100,0,0,.Letext0
 400               	.Letext0:
 401               		.ident	"GCC: (GNU) 11.2.0"
 402               	.global __do_copy_data
 403               	.global __do_clear_bss
GAS LISTING /tmp/ccfPHSKZ.s 			page 10


DEFINED SYMBOLS
                            *ABS*:0000000000000000 adc.c
     /tmp/ccfPHSKZ.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccfPHSKZ.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccfPHSKZ.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccfPHSKZ.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccfPHSKZ.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccfPHSKZ.s:18     .text:0000000000000000 init_timers
     /tmp/ccfPHSKZ.s:377    .bss:0000000000000001 sync
     /tmp/ccfPHSKZ.s:53     .text:0000000000000014 adts_disable
     /tmp/ccfPHSKZ.s:74     .text:000000000000001a adts_enable
     /tmp/ccfPHSKZ.s:106    .text:000000000000002c __vector_24
                            *ABS*:0000000000000001 __gcc_isr.n_pushed.001
     /tmp/ccfPHSKZ.s:395    .bss:0000000000000004 adc_read
     /tmp/ccfPHSKZ.s:383    .bss:0000000000000002 adc_rdy
     /tmp/ccfPHSKZ.s:141    .text:000000000000004c __vector_16
                            *ABS*:0000000000000001 __gcc_isr.n_pushed.002
     /tmp/ccfPHSKZ.s:166    .text:0000000000000058 __vector_9
                            *ABS*:0000000000000003 __gcc_isr.n_pushed.003
     /tmp/ccfPHSKZ.s:370    .bss:0000000000000000 adc_mux_rdy
     /tmp/ccfPHSKZ.s:194    .text:0000000000000076 calibrate_timer0
     /tmp/ccfPHSKZ.s:389    .bss:0000000000000003 calibrating
     /tmp/ccfPHSKZ.s:357    .data:0000000000000000 phase_delay
     /tmp/ccfPHSKZ.s:363    .data:0000000000000001 TIMER0_TOP
     /tmp/ccfPHSKZ.s:320    .text:000000000000011e init_adc

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
